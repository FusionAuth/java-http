/*
 * Copyright (c) 2018-2023, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
jackson5Version = "3.0.1"
restifyVersion = "4.1.2"
testngVersion = "7.7.1"

project(group: "io.fusionauth", name: "java-http", version: "0.1.15", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      // Dependency resolution order:
      //
      // 1. Hit the savant cache, and then maven cache
      cache()
      mavenCache()
      //
      // 2. Look in public savant repo
      url(url: "https://repository.savantbuild.org")
      //
      // 3. No dice, see if we can find it in Maven central
      maven()
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  dependencies {
    group(name: "test-compile", export: false) {
      dependency(id: "com.inversoft:jackson5:${jackson5Version}")
      dependency(id: "com.inversoft:restify:${restifyVersion}")
      dependency(id: "org.testng:testng:${testngVersion}")
    }
  }

  publications {
    standard()
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:2.0.0-RC.6")
java = loadPlugin(id: "org.savantbuild.plugin:java:2.0.0-RC.6")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:2.0.0-RC.6")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:2.0.0-RC.7")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:2.0.0-RC.6")
pom = loadPlugin(id: "org.savantbuild.plugin:pom:2.0.0-RC.6")

java.settings.javaVersion = "17"
java.settings.compilerArguments = "--add-exports java.base/sun.security.x509=ALL-UNNAMED --add-exports java.base/sun.security.util=ALL-UNNAMED -XDignore.symbol.file"
javaTestNG.settings.javaVersion = "17"
javaTestNG.settings.jvmArguments = "--add-exports java.base/sun.security.x509=ALL-UNNAMED --add-exports java.base/sun.security.util=ALL-UNNAMED"
javaTestNG.settings.testngArguments = "-listener io.fusionauth.http.BaseTest\$TestListener"

target(name: "clean", description: "Cleans the build directory") {
  java.clean()
}

target(name: "compile", description: "Compiles the Java source files") {
  java.compile()
}

target(name: "jar", description: "Builds the project JARs", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
  var exclude = ["performance"]
  if (switches.has("includePerformance")) {
    exclude = []
  }

  javaTestNG.test(exclude: exclude)
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test"]) {
  dependency.integrate()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "int"]) {
  release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "pom", description: "Updates the pom.xml file") {
  pom.update()
}

target(name: "print-dependency-tree", description: "Prints the dependency tree") {
  dependency.printFull()
}

target(name: "publish", description: "Publish to MVN repo", dependsOn: ["clean", "compile"]) {
  if (new ProcessBuilder('mvn', 'clean', 'deploy', '-Prelease').inheritIO().start().waitFor() != 0) {
    fail("deploy failed")
  }
}
