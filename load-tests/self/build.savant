/*
 * Copyright (c) 2022-2025, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
project(group: "io.fusionauth", name: "self", version: "0.1.0", licenses: ["Apache-2.0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  dependencies {
    group(name: "compile") {
      dependency(id: "io.fusionauth:java-http:0.4.0-RC.7.{integration}")
    }
  }

  publications {
    standard()
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:2.0.0")
file = loadPlugin(id: "org.savantbuild.plugin:file:2.0.0")
java = loadPlugin(id: "org.savantbuild.plugin:java:2.0.0")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:2.0.0")

java.settings.javaVersion = "21"
java.settings.compilerArguments = ""

target(name: "clean", description: "Cleans the build directory") {
  java.clean()
}

target(name: "compile", description: "Compiles the Java source files") {
  java.compile()
}

target(name: "jar", description: "Builds the project JARs", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "app", description: "Builds the app", dependsOn: ["jar"]) {
  // Copy all compile dependencies to be able to run command line
  dependency.copy(to: "build/dist/lib") {
    dependencies(group: "compile", transitive: true, fetchSource: false)
  }

  file.copy(to: "build/dist/lib") {
    fileSet(dir: "build/jars")
  }

  file.copy(to: "build/dist") {
    fileSet(dir: "src/main/script")
  }
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "start", description: "Starts the java-http server for load testing!", dependsOn: ["app"]) {
  if (new ProcessBuilder('./start.sh').directory(new File("build/dist")).inheritIO().start().waitFor() != 0) {
    fail("Unable to start the server!")
  }
}

target(name: "suspend", description: "Starts the java-http server for load testing! ", dependsOn: ["app"]) {
  if (new ProcessBuilder('./start.sh', '--suspend').directory(new File("build/dist")).inheritIO().start().waitFor() != 0) {
    fail("Unable to start the server!")
  }
}
